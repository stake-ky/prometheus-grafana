version: "3.7"

services:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    #   - '--web.listen-address=0.0.0.0:9090'
    #   - '--web.enable-admin-api'
    #   - '--web.external-url=https://localhost:1234'
    #   - '--alertmanager.url=http://alertmanager:9093'
    ports:
      - "9090:9090"
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=RANDOM_ROOT_PASSWORD
      - GF_USERS_ALLOW_SIGN_UP=false
    #   - GF_SERVER_DOMAIN=example.com
    #   - GF_SMTP_ENABLED=true
    #   - GF_SMTP_HOST=smtp.gmail.com:587
    #   - GF_SMTP_USER=myadrress@gmail.com
    #   - GF_SMTP_PASSWORD=mypassword
    #   - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com
    #   - GF_INSTALL_PLUGINS="grafana-clock-panel,grafana-simple-json-datasource"
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  nginx:
    image: nginx:1.15-alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./prometheus/:/etc/prometheus/
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 5d & wait $${!}; done;'"

#   cadvisor:
#     image: google/cadvisor:latest
#     container_name: monitoring_cadvisor
#     restart: unless-stopped
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:rw
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#     expose:
#       - 8080

volumes:
    prometheus_data:
    grafana_data:
